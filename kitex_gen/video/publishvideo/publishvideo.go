// Code generated by Kitex v0.4.4. DO NOT EDIT.

package publishvideo

import (
	"context"
	video "github.com/HelliWrold1/quaver/kitex_gen/video"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return publishVideoServiceInfo
}

var publishVideoServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "PublishVideo"
	handlerType := (*video.PublishVideo)(nil)
	methods := map[string]kitex.MethodInfo{
		"PublishVideo": kitex.NewMethodInfo(publishVideoHandler, newPublishVideoPublishVideoArgs, newPublishVideoPublishVideoResult, false),
		"ListVideos":   kitex.NewMethodInfo(listVideosHandler, newPublishVideoListVideosArgs, newPublishVideoListVideosResult, false),
		"ListFeeds":    kitex.NewMethodInfo(listFeedsHandler, newPublishVideoListFeedsArgs, newPublishVideoListFeedsResult, false),
		"ListLikes":    kitex.NewMethodInfo(listLikesHandler, newPublishVideoListLikesArgs, newPublishVideoListLikesResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func publishVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.PublishVideoPublishVideoArgs)
	realResult := result.(*video.PublishVideoPublishVideoResult)
	success, err := handler.(video.PublishVideo).PublishVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishVideoPublishVideoArgs() interface{} {
	return video.NewPublishVideoPublishVideoArgs()
}

func newPublishVideoPublishVideoResult() interface{} {
	return video.NewPublishVideoPublishVideoResult()
}

func listVideosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.PublishVideoListVideosArgs)
	realResult := result.(*video.PublishVideoListVideosResult)
	success, err := handler.(video.PublishVideo).ListVideos(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishVideoListVideosArgs() interface{} {
	return video.NewPublishVideoListVideosArgs()
}

func newPublishVideoListVideosResult() interface{} {
	return video.NewPublishVideoListVideosResult()
}

func listFeedsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.PublishVideoListFeedsArgs)
	realResult := result.(*video.PublishVideoListFeedsResult)
	success, err := handler.(video.PublishVideo).ListFeeds(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishVideoListFeedsArgs() interface{} {
	return video.NewPublishVideoListFeedsArgs()
}

func newPublishVideoListFeedsResult() interface{} {
	return video.NewPublishVideoListFeedsResult()
}

func listLikesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.PublishVideoListLikesArgs)
	realResult := result.(*video.PublishVideoListLikesResult)
	success, err := handler.(video.PublishVideo).ListLikes(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishVideoListLikesArgs() interface{} {
	return video.NewPublishVideoListLikesArgs()
}

func newPublishVideoListLikesResult() interface{} {
	return video.NewPublishVideoListLikesResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PublishVideo(ctx context.Context, req *video.PubReq) (r *video.PubResp, err error) {
	var _args video.PublishVideoPublishVideoArgs
	_args.Req = req
	var _result video.PublishVideoPublishVideoResult
	if err = p.c.Call(ctx, "PublishVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListVideos(ctx context.Context, req *video.ListReq) (r *video.ListResp, err error) {
	var _args video.PublishVideoListVideosArgs
	_args.Req = req
	var _result video.PublishVideoListVideosResult
	if err = p.c.Call(ctx, "ListVideos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListFeeds(ctx context.Context, req *video.FeedReq) (r *video.FeedResp, err error) {
	var _args video.PublishVideoListFeedsArgs
	_args.Req = req
	var _result video.PublishVideoListFeedsResult
	if err = p.c.Call(ctx, "ListFeeds", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListLikes(ctx context.Context, req *video.ListLikeReq) (r *video.ListLikeResp, err error) {
	var _args video.PublishVideoListLikesArgs
	_args.Req = req
	var _result video.PublishVideoListLikesResult
	if err = p.c.Call(ctx, "ListLikes", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
