// Code generated by Validator v0.1.4. DO NOT EDIT.

package video

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *StatusResp) IsValid() error {
	return nil
}
func (p *PubReq) IsValid() error {
	if len(p.Title) < int(1) {
		return fmt.Errorf("field Title min_len rule failed, current value: %d", len(p.Title))
	}
	if p.AuthorId <= int64(0) {
		return fmt.Errorf("field AuthorId gt rule failed, current value: %v", p.AuthorId)
	}
	if p.Datetime <= int64(0) {
		return fmt.Errorf("field Datetime gt rule failed, current value: %v", p.Datetime)
	}
	return nil
}
func (p *PubResp) IsValid() error {
	if p.StatusResp != nil {
		if err := p.StatusResp.IsValid(); err != nil {
			return fmt.Errorf("filed StatusResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListReq) IsValid() error {
	if p.UserId <= int64(0) {
		return fmt.Errorf("field UserId gt rule failed, current value: %v", p.UserId)
	}
	return nil
}
func (p *Video) IsValid() error {
	if p.Author != nil {
		if err := p.Author.IsValid(); err != nil {
			return fmt.Errorf("filed Author not valid, %w", err)
		}
	}
	return nil
}
func (p *User) IsValid() error {
	return nil
}
func (p *ListResp) IsValid() error {
	if p.StatusResp != nil {
		if err := p.StatusResp.IsValid(); err != nil {
			return fmt.Errorf("filed StatusResp not valid, %w", err)
		}
	}
	return nil
}
func (p *FeedReq) IsValid() error {
	if p.StatusResp != nil {
		if err := p.StatusResp.IsValid(); err != nil {
			return fmt.Errorf("filed StatusResp not valid, %w", err)
		}
	}
	if p.LatestTime != nil {
		if *p.LatestTime <= int64(0) {
			return fmt.Errorf("field LatestTime gt rule failed, current value: %v", *p.LatestTime)
		}
	}
	return nil
}
func (p *FeedResp) IsValid() error {
	return nil
}
func (p *ListLikeReq) IsValid() error {
	return nil
}
func (p *ListLikeResp) IsValid() error {
	if p.StatusResp != nil {
		if err := p.StatusResp.IsValid(); err != nil {
			return fmt.Errorf("filed StatusResp not valid, %w", err)
		}
	}
	return nil
}
