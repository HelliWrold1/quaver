// Code generated by hertz generator.

package api

import (
	"context"
	"fmt"
	api "github.com/HelliWrold1/quaver/cmd/api/biz/model/api"
	"github.com/HelliWrold1/quaver/cmd/api/biz/mw"
	"github.com/HelliWrold1/quaver/cmd/api/biz/rpc"
	"github.com/HelliWrold1/quaver/kitex_gen/comment"
	"github.com/HelliWrold1/quaver/kitex_gen/like"
	"github.com/HelliWrold1/quaver/kitex_gen/user"
	"github.com/HelliWrold1/quaver/kitex_gen/video"
	"github.com/HelliWrold1/quaver/pkg/errno"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"strconv"
	"strings"
	"time"
)

// UserRegister .
// @router /douyin/user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
		return
	}
	_, err = rpc.UserRegister(context.Background(), &user.RegisterReq{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
	}

	// 签发token
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// UserLogin .
// @router /douyin/user/register [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// UserInfo .
// @router douyin/user/ [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
		return
	}
	resp, err := rpc.UserQuery(context.Background(), &user.InfoReq{
		UserId: req.UserID,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
	}
	c.JSON(consts.StatusOK, utils.H{
		"status_code":    0,
		"status_message": errno.Success.ErrMsg,
		"user": map[string]interface{}{
			"id":   resp.UserId,
			"name": resp.Username,
		},
	})
}

// LikeAction .
// @router /douyin/favorite/action/ [POST]
func LikeAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FavouriteActionRequest
	req.VideoID, err = strconv.ParseInt(c.Query("video_id"), 10, 64)
	req.ActionType, err = strconv.ParseInt(c.Query("action_type"), 10, 64)
	v, _ := c.Get("identityKey")
	req.UserID = v.(*api.User).Id
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
		return
	}
	if req.ActionType == 1 {
		_, err = rpc.LikeVideo(context.Background(), &like.LikeReq{
			UserId:  req.UserID,
			VideoId: req.VideoID,
		})
		if err != nil {
			SendResponse(c, errno.ConvertErr(err))
		}
		c.JSON(consts.StatusOK, utils.H{
			"status_code":    errno.Success.ErrCode,
			"status_message": errno.Success.ErrMsg,
		})
	} else if req.ActionType == 2 {
		_, err = rpc.DeleteLike(context.Background(), &like.DeleteReq{
			UserId:  req.UserID,
			VideoId: req.VideoID,
		})
		if err != nil {
			SendResponse(c, errno.ConvertErr(err))
		}
		c.JSON(consts.StatusOK, utils.H{
			"status_code":    errno.Success.ErrCode,
			"status_message": errno.Success.ErrMsg,
		})
	} else {
		c.JSON(consts.StatusBadRequest, utils.H{
			"status_code":    -1,
			"status_message": "ActionTypeError!",
		})
	}

}

// FavouriteList .
// @router /douyin/favorite/list/ [GET]
func FavouriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FavouriteListRequest
	req.UserID, err = strconv.ParseInt(c.Query("user_id"), 10, 64)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
	}
	resp, err := rpc.ListLikes(context.Background(), &video.ListLikeReq{
		UserId: req.UserID})

	c.JSON(consts.StatusOK, utils.H{
		"status_code":    0,
		"status_message": errno.Success.ErrMsg,
		"video_list":     resp.VideoList,
	})
}

// CommentAction .
// @router /douyin/comment/action/ [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
	}
	respDelete := new(api.CommentListResp)
	v, _ := c.Get("identityKey")
	if req.ActionType == 1 {
		resp, err := rpc.PublishComment(context.Background(), &comment.PubReq{
			Msg:      req.CommentText,
			AuthorId: v.(*api.User).Id,
			VideoId:  req.VideoID,
		})
		if err != nil {
			SendResponse(c, errno.ConvertErr(err))
		}
		respDelete.BaseResp.StatusCode = int64(resp.StatusResp.StatusCode)
		respDelete.BaseResp.StatusMessage = *resp.StatusResp.StatusMsg
		respDelete.CommentList = make([]*api.CommentPub, len(resp.GetCommentList()))
		for key, comment := range resp.CommentList {
			respDelete.CommentList[key] = &api.CommentPub{
				Id: comment.CommentId,
				User: api.User{
					Id:   comment.UserId,
					Name: comment.UserName,
				},
				Content:    comment.Msg,
				CreateDate: comment.Date,
			}
		}

		if err != nil {
			SendResponse(c, errno.ConvertErr(err))
		}

	} else if req.ActionType == 2 {
		commetId, err := strconv.ParseInt(*req.CommentID, 10, 64)
		_, err = rpc.DeleteComment(context.Background(), &comment.DeleteReq{
			VideoId:   req.VideoID,
			CommentId: commetId,
		})

		if err != nil {
			SendResponse(c, errno.ConvertErr(err))
		}
		commentListResp, err := rpc.ListComments(context.Background(), &comment.ListReq{
			VideoId: req.VideoID,
		})

		respDelete.BaseResp.StatusCode = int64(commentListResp.StatusResp.StatusCode)
		respDelete.BaseResp.StatusMessage = *commentListResp.StatusResp.StatusMsg
		respDelete.CommentList = make([]*api.CommentPub, len(commentListResp.GetCommentList()))
		for key, comment := range commentListResp.CommentList {
			respDelete.CommentList[key] = &api.CommentPub{
				Id: comment.CommentId,
				User: api.User{
					Id:   comment.UserId,
					Name: comment.UserName,
				},
				Content:    comment.Msg,
				CreateDate: comment.Date,
			}
		}

		if err != nil {
			SendResponse(c, errno.ConvertErr(err))
		}
	} else {
		c.JSON(consts.StatusBadRequest, utils.H{
			"status_code":    -1,
			"status_message": "ActionTypeError!",
		})
	}

	c.JSON(consts.StatusOK, respDelete)
}

// CommentList .
// @router /douyin/comment/list/ [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
	}
	var respCommentList *comment.ListResp
	respCommentList, err = rpc.ListComments(context.Background(), &comment.ListReq{
		VideoId: req.VideoID,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
	}

	resp := new(api.CommentListResp)
	resp.BaseResp.StatusCode = int64(respCommentList.StatusResp.StatusCode)
	resp.BaseResp.StatusMessage = *respCommentList.StatusResp.StatusMsg
	resp.CommentList = make([]*api.CommentPub, len(respCommentList.GetCommentList()))
	for key, comment := range respCommentList.CommentList {
		resp.CommentList[key] = &api.CommentPub{
			Id: comment.CommentId,
			User: api.User{
				Id:   comment.UserId,
				Name: comment.UserName,
			},
			Content:    comment.Msg,
			CreateDate: comment.Date,
		}
	}
	c.JSON(consts.StatusOK, resp)
}

// VideoFeed .
// @router /douyin/feed/ [GET]
func VideoFeed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.VideoFeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
	}
	resp, err := rpc.ListFeeds(context.Background(), &video.FeedReq{
		LatestTime: req.LatestTime,
	})

	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
	}

	c.JSON(consts.StatusOK, resp)
}

// VideoPublish .
// @router /douyin/publish/action/ [POST]
func VideoPublish(ctx context.Context, c *app.RequestContext) {
	title := c.PostForm("title")
	file, _ := c.FormFile("data")
	v, _ := c.Get("identityKey")
	//v, _ := c.GetPostForm("identityKey")
	hlog.Info(file.Filename)
	// 存储视频
	splitName := strings.Split(file.Filename, ".")
	fileName := title + splitName[0] + "_" + time.Now().Format("20060504030201") + splitName[1]
	hlog.Info(fileName)
	// Upload the file to specific dst
	err := c.SaveUploadedFile(file, fmt.Sprintf("~/go/src/github.com/HelliWrold1/quaver/static/videos/%s.mp4", fileName))
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
	}
	fileUrl := "http://127.0.0.1:8082/videos/" + fileName
	//err = new(ffmpeg.Bind).Thumbnail("/Users/fengdacrcy/Desktop/tik_tok_3/quaver/videos/"+fileName+".mp4", "/Users/fengdacrcy/Desktop/tik_tok_3/quaver/static/images/"+fileName+".jpg",
	//	1*time.Second, true)
	_, err = rpc.PublishVideo(context.Background(), &video.PubReq{
		Title:    title,
		AuthorId: v.(*api.User).Id,
		Datetime: time.Now().Unix(),
		PlayUrl:  fileUrl,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
	}
	c.JSON(consts.StatusOK, utils.H{
		"status_code": 0,
		"status_msg":  errno.Success,
	})
}

// VideoPublishList .
// @router /douyin/publish/list/ [GET]
func VideoPublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.VideoPublishListRequest
	err = c.BindAndValidate(&req)
	resp, err := rpc.ListVideos(context.Background(), &video.ListReq{
		UserId: req.UserID,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
	}

	c.JSON(consts.StatusOK, utils.H{
		"status_code": 0,
		"status_msg":  errno.Success,
		"video_list":  resp.VideoList,
	})
}
